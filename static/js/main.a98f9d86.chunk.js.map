{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","result","setResult","useEffect","fetch","method","then","response","json","data","catch","error","console","log","className","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","width","TableBody","map","row","href","svn_url","target","rel","name","description","language","alignRight","created_at","sortDirection","updated_at","full_name","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sRA4DeA,MAlDf,WAAgB,IAAD,EAEeC,mBAAS,IAFxB,mBAENC,EAFM,KAEEC,EAFF,KAab,OATAC,qBAAU,WACRC,MAAM,8CAA+C,CAACC,OAAQ,QAC3DC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJP,EAAUO,MAEXC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,QAC7B,IAGD,sBAAKG,UAAU,MAAf,UACE,0DACA,8BACE,cAACC,EAAA,EAAD,CAAgBC,UAAWC,IAA3B,SACE,eAACC,EAAA,EAAD,CAAOC,aAAW,eAAlB,UACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAWC,MAAM,MAAjB,kBACA,cAACD,EAAA,EAAD,0BACA,cAACA,EAAA,EAAD,CAAWC,MAAM,MAAjB,sBACA,cAACD,EAAA,EAAD,CAAWC,MAAM,MAAjB,qBACA,cAACD,EAAA,EAAD,CAAWC,MAAM,MAAjB,0BAGJ,cAACC,EAAA,EAAD,UACGvB,EAAOwB,KAAI,SAACC,GAAD,OACV,eAACL,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAWC,MAAM,MAAjB,SACE,mBAAGI,KAAMD,EAAIE,QAASC,OAAO,SAASC,IAAI,aAA1C,SACGJ,EAAIK,SAGT,cAACT,EAAA,EAAD,UAAYI,EAAIM,cAChB,cAACV,EAAA,EAAD,CAAWC,MAAM,MAAjB,SAAwBG,EAAIO,WAC5B,cAACX,EAAA,EAAD,CAAWC,MAAM,MAAMW,YAAU,EAAjC,SAAmCR,EAAIS,aACvC,cAACb,EAAA,EAAD,CAAWC,MAAM,MAAMW,YAAU,EAACE,cAAc,OAAhD,SAAwDV,EAAIW,eAT/CX,EAAIY,2BC5BpBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnC,MAAK,YAAkD,IAA/CoC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a98f9d86.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport './App.css';\n\nfunction App() {\n\n  const [result, setResult] = useState([]);\n\n  useEffect(() => {\n    fetch('https://api.github.com/users/likarajo/repos', {method: \"GET\"})\n      .then(response => response.json())\n      .then(data => {\n        setResult(data);\n      })\n      .catch(error => console.log(error));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <p>Machine Learning Projects</p>\n      <div>\n        <TableContainer component={Paper}>\n          <Table aria-label=\"simple table\">\n            <TableHead>\n              <TableRow>\n                <TableCell width=\"15%\">Name</TableCell>\n                <TableCell>Description</TableCell>\n                <TableCell width=\"15%\">Language</TableCell>\n                <TableCell width=\"15%\">Created</TableCell>\n                <TableCell width=\"15%\">Updated</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {result.map((row) => (\n                <TableRow key={row.full_name}>\n                  <TableCell width=\"15%\">\n                    <a href={row.svn_url} target=\"_blank\" rel=\"noreferrer\">\n                      {row.name}\n                    </a>\n                  </TableCell>\n                  <TableCell>{row.description}</TableCell>\n                  <TableCell width=\"15%\">{row.language}</TableCell>\n                  <TableCell width=\"15%\" alignRight>{row.created_at}</TableCell>\n                  <TableCell width=\"15%\" alignRight sortDirection=\"desc\">{row.updated_at}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}